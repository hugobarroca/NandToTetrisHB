class SnakeGame{
    field Snake snake;

    constructor SnakeGame new(){
        let snake = Snake.new();
        return this;
    }

    method void run(){
        var char currentKey;
        var char lastKey;
        var int moveCounter;
        var int direction;

        //do drawBorder(8);
        do drawSnake();
        let moveCounter = 0;

        while(true){
            let direction = 0;
            let currentKey = Keyboard.keyPressed();
            
            if (~(currentKey = 0)){
                if (currentKey = 81){
                    return;
                }else{
                    let lastKey = currentKey;
                }
            }
      
            if (moveCounter = 5){
                if (lastKey = 131) { let direction = 1; }   // up arrow
                if (lastKey = 133) { let direction = 2; }   // down arrow
                if (lastKey = 130) { let direction = 3; }   // left arrow
                if (lastKey = 132) { let direction = 4; }   // right arrow
                if (~(direction = 0)){
                    do undrawTail();
                    do snake.move(direction);
                    do drawHead();
                }
                let moveCounter = 0;
            } else {
                let moveCounter = moveCounter + 1;
            }
            do Sys.wait(100);
        }
        return;
    }

    method void drawSnake(){
        var CoordinateQueue coordinatesQueue;
        var Array coordinatesArray;
        var Coordinate currentCoordinate;
        var int size;
        var int i;
        
        let coordinatesQueue = snake.getCoordinates();
        let coordinatesArray = coordinatesQueue.getArray();
        let size = coordinatesQueue.getNrElements();

        let i = 0;
        while (i < size){
            let currentCoordinate = coordinatesArray[i];
            do drawCoordinate(currentCoordinate, true);
            let i = i + 1;
        }
        return;
    }

    method void drawHead(){
        do drawCoordinate(snake.getHead(), true);
        return;
    }

    method void undrawTail(){
        do drawCoordinate(snake.getTail(), false);
        return;
    }

// Draws or undraws the given coordinate.
    method void drawCoordinate(Coordinate coord, boolean draw){
        var int coordX;
        var int coordY;
        let coordX = coord.getX();
        let coordY = coord.getY();
        do Screen.setColor(draw);
        do Screen.drawRectangle(coordX*8, coordY*8, (coordX*8)+8, (coordY*8)+8);
        do Screen.setColor(false);
        return;
    }

// Draws the border of the game. The border will have a thickness of borderWidth pixels.
    method void drawBorder(int borderWidth){
        do Screen.setColor(true);
        do Screen.drawRectangle(0, 0, 511, borderWidth);                                // North Border
        do Screen.drawRectangle(0, 255-borderWidth, 511, 255);                          // South Border
        do Screen.drawRectangle(0, borderWidth+1, borderWidth, 255-borderWidth);        // West Border
        do Screen.drawRectangle(511-borderWidth, borderWidth+1, 511, 255-borderWidth);  // East Border
        do Screen.setColor(false);
        return;
    }

    method void dispose(){
        do Memory.deAlloc(this);
        return;
    }
    
}
