/* This class represents a Queue data structure, created to hold Coordinate-type objects.
It uses an Array in order to store it's elements. Elements are added from left to right, and are removed also from left to right.
    Fields:
        nrOfElements - Number of elements currently in the Queue.
        arraySize - Size allocated to the Queue's array.
        lastElementIndex - Index of the last element added of the queue. It's updated when an object is inserted. It's -1 when queue is empty.
*/
class CoordinateQueue{
    field Array queueArray;
    field int arraySize;
    field int nrOfElements;
    field int lastElementIndex;

    //Creates a new empty Queue, with an array of size "size".
    constructor CoordinateQueue new(int size){
        let arraySize = size;
        let queueArray = Array.new(arraySize);
        let nrOfElements = 0;
        let lastElementIndex = -1;
        return this;
    }

    // Inserts a Coordinate into the Queue, into the rightmost side of the queue array.
    // If the array is full, it does nothing.
    method void insert(Coordinate coordinate){
        // If there's still at least one empty address left in the array;
        if(lastElementIndex < (arraySize - 1)){
            // Put the given coordinate in that address.
            let queueArray[lastElementIndex + 1] = coordinate;
            let nrOfElements = nrOfElements + 1;
            let lastElementIndex = lastElementIndex + 1;
        }
        return;
    }

    // Removes a coordinate from the leftmost side of the Queue, and moves all other coordinates one to the left.
    method void remove(){
        var Coordinate removedCoordinate;
        var int i;
        let i = 0;

        let removedCoordinate = queueArray[0];
        // Iterate through all elements of the array, except the last (it's value is ignored);
        while(i < (nrOfElements - 1)){
            // Each element takes on the value of the next element.
            let queueArray[i] = queueArray[i + 1];
            let i = i + 1;
        }

        do removedCoordinate.dispose();
        let nrOfElements = nrOfElements - 1;
        let lastElementIndex = lastElementIndex - 1;
        return;
    }

    method Array getArray(){
        return queueArray;
    }

    method int getSize(){
        return arraySize;
    }

    method int getNrElements(){
        return nrOfElements;
    }

    method void printArray(){
        var int i;
        var Coordinate coord;

        let i = 0;

        do Output.printString("[");
        while(i < nrOfElements){
            let coord = queueArray[i];
            do Output.printString("(");
            do Output.printInt(coord.getX());
            do Output.printString(",");
            do Output.printInt(coord.getY());
            do Output.printString(")");
            let i = i + 1;
        }
        do Output.printString("]");
        return;
    }

    method void dispose(){
        do Memory.deAlloc(this);
        return;
    }
}
