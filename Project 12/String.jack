// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
	field Array string;
	field int nextIndex;
	field int maxSize;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
		if(maxLength = 0){
			let string = Array.new(maxLength + 1);
		} else {
			let string = Array.new(maxLength);
		}
		let nextIndex = 0;
		let maxSize = maxLength;
		return this;
    }

    /** Disposes this string. */
    method void dispose() {
		do Memory.deAlloc(this);
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
		return nextIndex;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		if(j > -1 & j < nextIndex ){
			return string[j];
		}
		return null;
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		if(j > -1 & j < nextIndex ){
			let string[j] = c;
		}
		return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		if(nextIndex < maxSize){
			let string[nextIndex] = c;
			let nextIndex = nextIndex + 1;
		}
		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		if(nextIndex > 0){
			let nextIndex = nextIndex - 1;
		}
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
	//"456"
    method int intValue() {
		var int result;
		var	int currentChar;
		var int digitPosition;
		var boolean isPositive;
		
		let result = 0;
		let currentChar = 0;
		let digitPosition = 1;
		
		if(string[0] = 45){
			let isPositive = false;
		}else{
			let isPositive = true;
		}
		
		if(isPositive){
			while(isDigit(string[currentChar + 1]) & currentChar + 1 < maxSize){
				let currentChar = currentChar + 1;
			}
			// 6 + 50 + 400
			while(currentChar > -1){
				let result = result + ((string[currentChar] - 48) * digitPosition);
				let currentChar = currentChar - 1;
				let digitPosition = digitPosition * 10;
			}
			
			return result;
		}
		
		while(isDigit(string[currentChar + 1]) & currentChar + 1 < maxSize){
			let currentChar = currentChar + 1;
		}
		// 6 + 50 + 400
		while(currentChar > 0){
			let result = result + ((string[currentChar] - 48) * digitPosition);
			let currentChar = currentChar - 1;
			let digitPosition = digitPosition * 10;
		}
		
		let result = ~result + 1;
		
		return result;
		
		
    }

    /** Sets this string to hold a representation of the given value. */
	//12345
    method void setInt(int val) {
		var int value;
		var int temp;
		var int digits;
		
		let nextIndex = 0;
		let value = val;
		let digits = 0;
		
		if(val > -1){
			while(value > 0){
				let value = value / 10;
				let digits = digits + 1;
			}
			
			let value = val;
			while(digits > 0){ 
				let temp = value - ((value / 10) * 10);
				let string[digits - 1] = temp + 48;
				let value = value / 10;
				let digits = digits - 1;
				let nextIndex = nextIndex + 1;
			}
			return;
		}
		
		let value = -val;
		while(value > 0){
			let value = value / 10;
			let digits = digits + 1;
		}
		
		let value = -val;
		while(digits > 0){ 
			let temp = value - ((value / 10) * 10);
			let string[digits] = temp + 48;
			let value = value / 10;
			let digits = digits - 1;
			let nextIndex = nextIndex + 1;
		}
		let string[0] = 45;
		return;
		
    }

    /** Returns the new line character. */
    function char newLine() {
		return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
		return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
		return 34;
    }
	
	method boolean isDigit(char c){
		if(c > 47 & c < 58){
			return true;
		}
		return false;
	}
}
