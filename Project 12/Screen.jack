// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
	static Array twoToThe;
	static boolean currentColor;

    /** Initializes the Screen. */
    function void init() {
		let currentColor = true;
		let twoToThe = Array.new(15);
		let twoToThe[0]  = 1;
		let twoToThe[1]  = 2;
		let twoToThe[2]  = 4;
		let twoToThe[3]  = 8;
		let twoToThe[4]  = 16;
		let twoToThe[5]  = 32;
		let twoToThe[6]  = 64;
		let twoToThe[7]  = 128;
		let twoToThe[8]  = 256;
		let twoToThe[9]  = 512;
		let twoToThe[10] = 1024;
		let twoToThe[11] = 2048;
		let twoToThe[12] = 4096;
		let twoToThe[13] = 8192;
		let twoToThe[14] = 16384;
		// let twoToThe[15] = ~32767;
		return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
		var boolean tempColor;
		let tempColor = currentColor;
		let currentColor = false;
		do Screen.drawRectangle(0,0,511,255);
		let currentColor = tempColor;
		return;	
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
		let currentColor = b;
		return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
		var int address, value, bitToChange;
		
		let address = (32 * y) + (x / 16);
		let value = Memory.peek(16384 + address);
		
		// x % 16
		let bitToChange = x - ((x / 16) * 16);
		
		
		if(currentColor){
			let value = value | twoToThe[bitToChange];
		} else {
			let value = value & (~twoToThe[bitToChange]);
		}
		
		do Memory.poke(16384 + address, value);
		return;
		
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
		var int a, b, dx, dy, diff, bigX, smallX, bigY, smallY;
		
		if (x1 = x2){
			let bigY = Math.max(y1, y2);
			let smallY = Math.min(y1, y2);
			
			while(smallY < (bigY + 1)){
				do Screen.drawPixel(x1, smallY);
				let smallY = smallY + 1;
			}
			return;
		}
		
		if (y1 = y2){
			let bigX = Math.max(x1, x2);
			let smallX = Math.min(x1, x2);
			
			while(smallX < (bigX + 1)){
				do Screen.drawPixel(smallX, y1);
				let smallX = smallX + 1;
			}
			return;
		}
		
		let a = 0;
		let b = 0;
		let diff = 0;
		let bigY = Math.max(y1, y2);
		let smallY = Math.min(y1, y2);
		let bigX = Math.max(x1, x2);
		let smallX = Math.min(x1, x2);
		
		let dx = bigX - smallX;
		let dy = bigY - smallY;
		
		
		// while ((a < (dx + 1)) & (b > (dy - 1))){
			// do Screen.drawPixel(smallX + a, smallY + b);
			// if(diff < 0){
				// let a = a + 1;
				// let diff = diff + dy;
			// } else {
				// let b = b - 1;
				// let diff = diff - dx;
			// }
		// }
		
		//NE
		if(x1 < x2 & y1 > y2){
			while ((a < (dx + 1)) & (b > (dy - 1))){
				do Screen.drawPixel(x1 + a, y1 + b);
				if(diff < 0){
					let a = a + 1;
					let diff = diff - dy;
				} else {
					let b = b - 1;
					let diff = diff - dx;
				}
			}
		}
		
		//NW
		if(x1 > x2 & y1 > y2){
			while ((a > (dx - 1)) & (b > (dy - 1))){
				
				do Screen.drawPixel(x1 + a, y1 + b);
				
				if(diff < 0){
					let a = a - 1;
					let diff = diff - dy;
				} else {
					let b = b - 1;
					let diff = diff + dx;
				}
			}
		}
		
		//SE
		if(x1 < x2 & y1 < y2){
			while ((a < (dx + 1)) & (b < (dy + 1))){
				
				do Screen.drawPixel(x1 + a, y1 + b);
				
				if(diff < 0){
					let a = a + 1;
					let diff = diff + dy;
				} else {
					let b = b + 1;
					let diff = diff - dx;
				}
			}
		}
		
		//SW
		if(x1 > x2 & y1 < y2){
			while ((a > (dx - 1)) & (b < (dy + 1))){
				
				do Screen.drawPixel(x1 + a, y1 + b);
				
				if(diff < 0){
					let a = a - 1;
					let diff = diff + dy;
				} else {
					let b = b + 1;
					let diff = diff + dx;
				}
			}
		}
		
		return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
		var int a, dx, dy;
		let a = 0;
		let dx = x2 - x1;
		let dy = y2 - y1;
		
		while(a < dy){
			do Screen.drawLine(x1, y1 + a, x2, y1 + a);
			let a = a + 1;
		}
		
		return;
    }

    // /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
		var int dy;
		if(r > 181){
			return;
		}
		
		let dy = -r;
		
		while(dy < (r + 1)){
			do Screen.drawLine(x - Math.sqrt((r*r)-(dy*dy)), y + dy, x + Math.sqrt((r*r) - (dy*dy)), y + dy);
			let dy = dy + 1;
		}
		return;
    }
}
