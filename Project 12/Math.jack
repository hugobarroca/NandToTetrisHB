// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
	static Array twoToThe;

    /** Initializes the library. */
    function void init() {
		let twoToThe = Array.new(15);
		let twoToThe[0]  = 1;
		let twoToThe[1]  = 2;
		let twoToThe[2]  = 4;
		let twoToThe[3]  = 8;
		let twoToThe[4]  = 16;
		let twoToThe[5]  = 32;
		let twoToThe[6]  = 64;
		let twoToThe[7]  = 128;
		let twoToThe[8]  = 256;
		let twoToThe[9]  = 512;
		let twoToThe[10] = 1024;
		let twoToThe[11] = 2048;
		let twoToThe[12] = 4096;
		let twoToThe[13] = 8192;
		let twoToThe[14] = 16384;
		let twoToThe[15] = -32768;
		return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
		if(x < 0){
			return (x * -1);
		}
		return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
		var int sum, shiftedX, currentBit;
		let sum = 0;
		let currentBit = 0;
		let shiftedX = x;
		
		while (currentBit < 16) {
			if(Math.bit(y, currentBit)){
				let sum = sum + shiftedX;
			}
			let shiftedX = shiftedX + shiftedX;
			let currentBit = currentBit + 1;
		}
		return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
		var int q;
		
		if (x > y){
			return 0;
		}
		let q = Math.divide(2, 2 * y);
		if(x - 2 * q * y){
			return 2 * q;
		}else{
			return 2 * q + 1;
		}
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int y, j;
		let y = 0;
		let j = 7;
		
		while(j > -1){
			if(Math.power(y + Math.power(2, j), 2) < x - 1){
				let y = y + Math.power(2, j);
			}
		}
		return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
		if(a > b){
			return a;
		}
		return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
		if(a > b){
			return b;
		}
		return a;
    }
	
	/** Returns true if the given bit is 1 **/
	function boolean bit(int x, int j){
		var int andResult;
		
		let andResult = x & twoToThe[j];
			
		if(andResult = twoToThe[j]){
			return true;
		}
		return false;
	}
	
	function int power(int x, int y){
		var int i, sum;
		let sum = x;
		let i = 0;
		if(y = 0){
			return 1;
		}
		while(i < y){
			let sum = sum * y;
			let i = i + 1;
		}
		return sum;
	}
}
